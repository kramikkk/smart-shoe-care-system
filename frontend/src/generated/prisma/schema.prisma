// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Transaction {
  id            String   @id @default(cuid())
  transactionId String   @unique
  dateTime      DateTime @default(now())
  paymentMethod String // "Cash" | "Online"
  serviceType   String // "Cleaning" | "Drying" | "Sterilizing" | "Package"
  amount        Float
  status        String // "Pending" | "Success" | "Failed"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("transaction")
}

model SensorReading {
  id            String   @id @default(cuid())
  temperature   Float? // in Celsius
  humidity      Float? // percentage
  atomizerLevel Float? // percentage
  uvLampActive  Boolean  @default(false)
  systemStatus  String   @default("Idle") // "Idle" | "Running" | "Maintenance" | "Error"
  timestamp     DateTime @default(now())
  createdAt     DateTime @default(now())

  @@map("sensor_reading")
}

model SystemAlert {
  id          String   @id @default(cuid())
  title       String
  description String
  severity    String // "info" | "warning" | "error"
  timestamp   DateTime @default(now())
  resolved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_alert")
}
